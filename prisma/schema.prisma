generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId   String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomsCreated Room[] @relation("RoomCreatedBy")
  roomsUpdated Room[] @relation("RoomUpdatedBy")
  billsCreated Bill[] @relation("BillCreatedBy")
  billsUpdated Bill[] @relation("BillUpdatedBy")
}

model Room {
  roomId     String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String   @unique
  size       String
  rent       Int
  deposit    Int
  bookingFee Int
  status     Int // 0 ว่าง 1 เต็ม
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  createdBy String  @db.ObjectId
  updatedBy String? @db.ObjectId

  // ✅ ทำให้ optional จะได้ไม่ต้องส่ง adminCreated เวลา create
  adminCreated Admin? @relation("RoomCreatedBy", fields: [createdBy], references: [adminId])
  adminUpdated Admin? @relation("RoomUpdatedBy", fields: [updatedBy], references: [adminId])

  bookings Booking[]
  bills    Bill[]
}

model Customer {
  customerId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique // LINE LIFF userId
  userName   String // LINE LIFF displayName
  cname      String
  csurname   String
  fullName   String
  cphone     String
  cmumId     String
  createdAt  DateTime @default(now())

  bookings Booking[]
  bills    Bill[]
}

model Payment {
  paymentId String   @id @default(auto()) @map("_id") @db.ObjectId
  slipUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking?
  bill    Bill?
}

model Booking {
  bookingId String    @id @default(auto()) @map("_id") @db.ObjectId
  checkin   DateTime
  checkout  DateTime?
  slipUrl   String
  status    Int // 0=รออนุมัติ, 1=อนุมัติ/เข้าพัก, 2=ไม่อนุมัติ, 3=คืนห้อง
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // FK -> Customer
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [customerId])

  // FK -> Room
  roomId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [roomId])

  // FK -> Payment
  paymentId String?  @unique @db.ObjectId
  payment   Payment? @relation(fields: [paymentId], references: [paymentId])
}

model Bill {
  billId    String   @id @default(auto()) @map("_id") @db.ObjectId
  number    String   @unique
  month     DateTime
  rent      Int
  service   Int
  wBefore   Int
  wAfter    Int
  wUnits    Int
  wPrice    Int
  eBefore   Int
  eAfter    Int
  eUnits    Int
  ePrice    Int
  fine      Int
  total     Int
  slipUrl   String
  status    Int // 0 ยังไม่ชำระ 1 ชำระแล้ว
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // FK -> Room
  roomId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [roomId])

  // FK -> Customer
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [customerId])

  // FK -> Admin
  createdBy    String  @db.ObjectId
  updatedBy    String? @db.ObjectId
  adminCreated Admin?  @relation("BillCreatedBy", fields: [createdBy], references: [adminId])
  adminUpdated Admin?  @relation("BillUpdatedBy", fields: [updatedBy], references: [adminId])

  // FK -> Payment
  paymentId String?  @unique @db.ObjectId
  payment   Payment? @relation(fields: [paymentId], references: [paymentId])
}
