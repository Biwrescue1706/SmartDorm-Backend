// src/modules/Bills/billService.ts
import { billRepository } from "./billRepository";
import { CreateBillInput, BillUpdateInput } from "./billModel";
import { notifyUser } from "../../utils/lineNotify";

const formatThaiDate = (dateInput: string | Date) => {
  const date = typeof dateInput === "string" ? new Date(dateInput) : dateInput;
  return date.toLocaleDateString("th-TH", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

export const billService = {
  async getAllBills() {
    return await billRepository.findAll();
  },

  async getBillById(billId: string) {
    const bill = await billRepository.findById(billId);
    if (!bill) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•");
    return bill;
  },

  async createBill(data: CreateBillInput, adminId: string) {
    const { roomId, customerId, month, wBefore, wAfter, eBefore, eAfter } = data;
    if (!roomId || !customerId || !month || !wAfter || !eAfter)
      throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");

    const room = await billRepository.findRoom(roomId);
    if (!room) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á");

    const rent = room.rent;
    const service = 20;
    const wPrice = 19;
    const ePrice = 7;

    const billMonth = new Date(month);
    const prevMonth = new Date(billMonth);
    prevMonth.setMonth(prevMonth.getMonth() - 1);

    const prevBill = await billRepository.findPrevBill(roomId, billMonth, prevMonth);

    const finalWBefore = prevBill ? prevBill.wAfter : (wBefore ?? 0);
    const finalEBefore = prevBill ? prevBill.eAfter : (eBefore ?? 0);

    const wUnits = wAfter - finalWBefore;
    const eUnits = eAfter - finalEBefore;
    const waterCost = wUnits * wPrice;
    const electricCost = eUnits * ePrice;

    const createdAt = new Date();
    const dueDate = new Date(createdAt);
    dueDate.setMonth(dueDate.getMonth() + 1);
    dueDate.setDate(5);

    let overdueDays = 0;
    let fine = 0;
    const today = new Date();
    if (today > dueDate) {
      const diff = today.getTime() - dueDate.getTime();
      overdueDays = Math.ceil(diff / (1000 * 60 * 60 * 24));
      fine = overdueDays * 50;
    }

    const total = rent + service + waterCost + electricCost + fine;

    const bill = await billRepository.create({
      month: new Date(month),
      rent,
      service,
      wBefore: finalWBefore,
      wAfter,
      wUnits,
      wPrice,
      waterCost,
      eBefore: finalEBefore,
      eAfter,
      eUnits,
      ePrice,
      electricCost,
      fine,
      overdueDays,
      total,
      dueDate,
      slipUrl: "",
      status: 0,
      roomId,
      customerId,
      createdBy: adminId,
      createdAt,
    });

    const msg = `üì¢ ‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${bill.customer.userName}
‡∏´‡πâ‡∏≠‡∏á: ${bill.room.number}
‡πÄ‡∏î‡∏∑‡∏≠‡∏ô : ${bill.month.toLocaleDateString("th-TH", { year: "numeric", month: "long" })}

-------------------

‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ : ${bill.rent.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á : ${bill.service.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ : ${bill.wUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ( ${bill.waterCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó )
‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü : ${bill.eUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ( ${bill.electricCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó )
‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${bill.total.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ${formatThaiDate(bill.dueDate)}

-------------------

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üè´SmartDormüéâ`;

    if (bill.customer.userId) {
      await notifyUser(bill.customer.userId, msg);
    }

    return bill;
  },

  async createBillFromRoom(roomId: string, body: any, adminId: string) {
    const { month, wBefore, wAfter, eBefore, eAfter } = body;
    const booking = await billRepository.findBooking(roomId);
    if (!booking) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡πä‡∏Å‡∏Å‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ");

    return await this.createBill(
      {
        roomId,
        customerId: booking.customerId,
        month,
        wBefore,
        wAfter,
        eBefore,
        eAfter,
      },
      adminId
    );
  },

  async updateBill(billId: string, data: BillUpdateInput, adminId: string) {
    return await billRepository.update(billId, { ...data, updatedBy: adminId });
  },

  async deleteBill(billId: string) {
    return await billRepository.delete(billId);
  },
};
