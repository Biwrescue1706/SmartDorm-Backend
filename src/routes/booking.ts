// src/routes/booking.ts
import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import path from "path";
import fs from "fs";

const router = Router();

// üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ
const UPLOAD_DIR = path.join(__dirname, "../../uploads");
if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR, { recursive: true });

// ‚úÖ ‡πÉ‡∏ä‡πâ memoryStorage
const upload = multer({ storage: multer.memoryStorage() });

/**
 * üìå ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ)
 */
router.post("/book", async (req: Request, res: Response) => {
  try {
    const { userId, roomId, checkin, name, phone, mumId } = req.body;

    // ‚úÖ ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å userId (‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‚Üí ‡πÉ‡∏ä‡πâ findFirst)
    let user = await prisma.user.findFirst({ where: { userId } });
    if (!user) {
      user = await prisma.user.create({
        data: { userId, name, phone, mumId },
      });
    }

    const room = await prisma.room.findUnique({ where: { id: roomId } });
    if (!room) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á" });
    if (room.status !== 0)
      return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });

    // ‚úÖ ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const existing = await prisma.booking.findFirst({
      where: { userId: user.id, status: { in: [0, 1] } },
    });
    if (existing)
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });

    const [booking] = await prisma.$transaction([
      prisma.booking.create({
        data: {
          user: { connect: { id: user.id } }, // connect ‡∏î‡πâ‡∏ß‡∏¢ id ‡∏ó‡∏µ‡πà unique
          room: { connect: { id: roomId } },
          checkin: new Date(checkin),
          status: 0,
        },
        include: { user: true, room: true },
      }),
      prisma.room.update({ where: { id: roomId }, data: { status: 1 } }),
    ]);

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
    await notifyUser(
      "Ud13f39623a835511f5972b35cbc5cdbd", // ‡πÅ‡∏à‡πâ‡∏á Admin
      `üì¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name} (${user.phone}) ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number}`
    );
    await notifyUser(
      user.userId, // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      `üõèÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    );

    res.json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
  } catch (err) {
    console.error("‚ùå Error booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á + ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ
 */
router.post("/create", upload.single("slip"), async (req: Request, res: Response) => {
  try {
    const { userId, roomId, checkin, name, phone, mumId } = req.body;
    const slip = req.file;

    if (!slip) return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ" });

    // ‚úÖ ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å userId (‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‚Üí ‡πÉ‡∏ä‡πâ findFirst)
    let user = await prisma.user.findFirst({ where: { userId } });
    if (!user) {
      user = await prisma.user.create({
        data: { userId, name, phone, mumId },
      });
    }

    const room = await prisma.room.findUnique({ where: { id: roomId } });
    if (!room) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á" });
    if (room.status !== 0)
      return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });

    // ‚úÖ ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå slip
    const filename = `${Date.now()}_${slip.originalname}`;
    const filepath = path.join(UPLOAD_DIR, filename);
    fs.writeFileSync(filepath, slip.buffer);
    const slipUrl = `/uploads/${filename}`;

    const [booking] = await prisma.$transaction([
      prisma.booking.create({
        data: {
          user: { connect: { id: user.id } }, // connect ‡∏î‡πâ‡∏ß‡∏¢ id
          room: { connect: { id: roomId } },
          checkin: new Date(checkin),
          slipUrl,
          status: 0,
        },
        include: { user: true, room: true },
      }),
      prisma.room.update({ where: { id: roomId }, data: { status: 1 } }),
    ]);

    res.json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° Slip ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
  } catch (err) {
    console.error("‚ùå Error booking with slip:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
  }
});

export default router;
