// src/routes/booking.ts
import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import path from "path";
import fs from "fs";

const router = Router();

// üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ
const UPLOAD_DIR = path.join(__dirname, "../../uploads");
if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR, { recursive: true });

// ‚úÖ ‡πÉ‡∏ä‡πâ memoryStorage (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô RAM ‡∏Å‡πà‡∏≠‡∏ô)
const upload = multer({ storage: multer.memoryStorage() });

/**
 * üìù User ‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡πÅ‡∏ô‡∏ö slip ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö url ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á)
 */
router.post("/create", upload.single("slip"), async (req: Request, res: Response) => {
  try {
    const { userId, ctitle, userName, roomId, checkin, cname, csurname, cphone, cmumId, slipUrl } =
      req.body;
    const slipFile = req.file;

    if (!userId || !roomId || !checkin) {
      return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    }

    // ‚úÖ ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Customer
    let customer = await prisma.customer.findUnique({ where: { userId } });
    if (!customer) {
      customer = await prisma.customer.create({
        data: {
          userId,
          userName,
          ctitle,
          cname,
          csurname,
          cphone,
          cmumId,
          fullName: `${cname} ${csurname}`,
        },
      });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á
    const room = await prisma.room.findUnique({ where: { roomId } });
    if (!room) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á" });
    if (room.status !== 0) return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ slip (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå)
    let finalSlipUrl = slipUrl || "";
    if (slipFile) {
      const filename = `${Date.now()}_${slipFile.originalname}`;
      const filepath = path.join(UPLOAD_DIR, filename);
      await fs.promises.writeFile(filepath, slipFile.buffer);
      finalSlipUrl = `/uploads/${filename}`;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ booking ‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    const existing = await prisma.booking.findFirst({
      where: { customerId: customer.customerId, status: { in: [0, 1] } },
    });
    if (existing) {
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á/‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á booking (status = 0 ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
    const booking = await prisma.booking.create({
      data: {
        customerId: customer.customerId,
        roomId,
        checkin: new Date(checkin),
        status: 0,
      },
      include: { customer: true, room: true, payments: true },
    });

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ slip ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Payment
    if (finalSlipUrl) {
      await prisma.payment.create({
        data: {
          bookingId: booking.bookingId,
          slipUrl: finalSlipUrl,
        },
      });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á booking ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° payments
    const bookingWithPayments = await prisma.booking.findUnique({
      where: { bookingId: booking.bookingId },
      include: { customer: true, room: true, payments: true },
    });

    // ‡πÅ‡∏à‡πâ‡∏á Admin
    await notifyUser(
      process.env.ADMIN_LINE_ID!,
      `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${customer.cname} (${customer.cphone}) ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number}`
    );

    res.json({
      message: "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      booking: bookingWithPayments,
    });
  } catch (err) {
    console.error("‚ùå Error create booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
 */
router.get("/getall", async (_req: Request, res: Response) => {
  try {
    const bookings = await prisma.booking.findMany({
      orderBy: { createdAt: "desc" },
      include: { room: true, customer: true, payments: true },
    });
    res.json(bookings);
  } catch (err) {
    console.error("‚ùå Error fetching bookings:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

export default router;
