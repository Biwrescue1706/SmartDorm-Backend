import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { notifyUser } from "../utils/lineNotify";

const router = Router();

/**
 * üìå ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
 */
router.post("/book", async (req: Request, res: Response) => {
  try {
    const { userId, roomId, checkin } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const user = await prisma.user.findUnique({ where: { id: userId } });
    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á
    const room = await prisma.room.findUnique({ where: { id: roomId } });
    if (!room) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á" });
    if (room.status !== 0) {
      return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });
    }

    // ‚úÖ ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ User ‡∏à‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const existingBooking = await prisma.booking.findFirst({
      where: { userId, status: { in: [0, 1] } }, // 0=‡∏à‡∏≠‡∏á, 1=‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
    });
    if (existingBooking) {
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const [booking] = await prisma.$transaction([
      prisma.booking.create({
        data: {
          userId,
          roomId,
          checkin: new Date(checkin),
          status: 0, // active
        },
      }),
      prisma.room.update({
        where: { id: roomId },
        data: { status: 1 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      }),
    ]);

    // üîî ‡πÅ‡∏à‡πâ‡∏á Admin
    await notifyUser(
      "Ud13f39623a835511f5972b35cbc5cdbd",
      `üì¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.name} (${user.phone}) ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number}`
    );

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    await notifyUser(
      user.userId,
      `üõèÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    );

    res.json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
  } catch (err) {
    console.error("‚ùå Error booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
 */
router.post("/checkout", async (req: Request, res: Response) => {
  try {
    const { bookingId } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö booking
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { user: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    if (booking.status === 2) {
      return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ Transaction ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï booking ‡πÅ‡∏•‡∏∞ room
    const [updatedBooking] = await prisma.$transaction([
      prisma.booking.update({
        where: { id: bookingId },
        data: { checkout: new Date(), status: 2 }, // checked_out
        include: { user: true, room: true },
      }),
      prisma.room.update({
        where: { id: booking.roomId },
        data: { status: 0 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
      }),
    ]);

    // üîî ‡πÅ‡∏à‡πâ‡∏á Admin
    await notifyUser(
      "Ud13f39623a835511f5972b35cbc5cdbd",
      `üì¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${updatedBooking.user.name} (${updatedBooking.user.phone}) ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${updatedBooking.room.number}`
    );

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    await notifyUser(
      updatedBooking.user.userId,
      `üì§ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${updatedBooking.room.number} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    );

    res.json({ message: "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error checkout:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

export default router;
