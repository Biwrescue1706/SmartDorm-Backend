import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import { createClient } from "@supabase/supabase-js";

const router = Router();

// ‚úÖ ‡πÉ‡∏ä‡πâ memoryStorage (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô RAM)
const upload = multer({ storage: multer.memoryStorage() });

// ‚úÖ Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

// üìù User ‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
router.post(
  "/create",
  upload.single("slip"),
  async (req: Request, res: Response) => {
    try {
      const {
        userId,
        userName,
        ctitle,
        cname,
        csurname,
        cphone,
        cmumId,
        roomId,
        checkin,
      } = req.body;
      const slipFile = req.file;

      if (!userId || !roomId || !checkin) {
        return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
      }

      // ‚úÖ Upload slip ‡πÑ‡∏õ Supabase ‡∏Å‡πà‡∏≠‡∏ô
      let finalSlipUrl = "";
      if (slipFile) {
        const filename = `slips/${Date.now()}_${slipFile.originalname}`;
        const { error } = await supabase.storage
          .from(process.env.SUPABASE_BUCKET!)
          .upload(filename, slipFile.buffer, {
            contentType: slipFile.mimetype,
            upsert: true,
          });

        if (error) {
          console.error("‚ùå Supabase upload error:", error.message);
          return res.status(500).json({ error: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        }

        const { data } = supabase.storage
          .from(process.env.SUPABASE_BUCKET!)
          .getPublicUrl(filename);

        finalSlipUrl = data.publicUrl;
      }

      // ‚úÖ Transaction: Customer ‡πÉ‡∏´‡∏°‡πà + Booking
      const booking = await prisma.$transaction(async (tx) => {
        // ‚û°Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Customer ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
        const customer = await tx.customer.create({
          data: {
            userId, // ‚ùó ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ã‡πâ‡∏≥ ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö @unique ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Prisma model
            userName,
            ctitle,
            cname,
            csurname,
            fullName: `${ctitle} ${cname} ${csurname}`,
            cphone,
            cmumId,
          },
        });

        // ‚û°Ô∏è Booking ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Customer ‡πÉ‡∏´‡∏°‡πà
        return tx.booking.create({
          data: {
            roomId,
            customerId: customer.customerId,
            checkin: new Date(checkin),
            slipUrl: finalSlipUrl,
            status: 0, // 0 = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          },
          include: { customer: true, room: true },
        });
      });

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á Admin ‡∏ú‡πà‡∏≤‡∏ô LINE
      const Adminmsg = `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà \n
      ‡∏ä‡∏∑‡πà‡∏≠ : ${booking.customer.fullName} \n
      ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : ${booking.customer.cphone} \n
      ‡∏´‡πâ‡∏≠‡∏á : ${booking.room.number}\n
      https://smartdorm-frontend.onrender.com`;
      await notifyUser(process.env.ADMIN_LINE_ID!, Adminmsg);
      res.json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
    } catch (err) {
      console.error("‚ùå Error create booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

// ‚úÖ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId/approve", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { room: true, customer: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    if (booking.status === 1) {
      return res.status(400).json({ error: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const [updatedBooking] = await prisma.$transaction([
      prisma.booking.update({ where: { bookingId }, data: { status: 1 } }),
      prisma.room.update({
        where: { roomId: booking.roomId },
        data: { status: 1 },
      }),
    ]);

    // üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á User
    await notifyUser(
      booking.customer.userId,
      `‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`
    );

    res.json({ message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error approving booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// ‚ùå Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId/reject", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const updatedBooking = await prisma.booking.update({
      where: { bookingId },
      data: { status: 2 }, // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    });

    await notifyUser(
      booking.customer.userId,
      `‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`
    );

    res.json({ message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error rejecting booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// ‚úèÔ∏è Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;
    const { ctitle, cname, csurname, cmumId, cphone, checkin, status } =
      req.body;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const updatedBooking = await prisma.booking.update({
      where: { bookingId },
      data: {
        checkin: checkin ? new Date(checkin) : booking.checkin,
        status: status !== undefined ? status : booking.status,
        customer: {
          update: {
            ctitle,
            cname,
            csurname,
            fullName: `${ctitle} ${cname} ${csurname}`,
            cmumId,
            cphone,
          },
        },
      },
      include: { customer: true, room: true },
    });

    res.json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error updating booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// üóëÔ∏è Admin ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.delete("/:bookingId", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({ where: { bookingId } });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
    await prisma.room.update({
      where: { roomId: booking.roomId },
      data: { status: 0 },
    });

    await prisma.booking.delete({ where: { bookingId } });

    res.json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Error deleting booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

export default router;
