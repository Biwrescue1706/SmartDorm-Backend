import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import path from "path";
import fs from "fs";

const router = Router();

// üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ
const UPLOAD_DIR = path.join(__dirname, "../../uploads");
if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR, { recursive: true });

// ‚úÖ ‡πÉ‡∏ä‡πâ memoryStorage (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô RAM ‡∏Å‡πà‡∏≠‡∏ô)
const upload = multer({ storage: multer.memoryStorage()});

// üìù User ‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡πÅ‡∏ô‡∏ö slip ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö url ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á)
router.post(
  "/create",
  upload.single("slip"),
  async (req: Request, res: Response) => {
    try {
      const {
        userId,
        ctitle,
        userName,
        roomId,
        checkin,
        cname,
        csurname,
        cphone,
        cmumId,
        slipUrl,
        billId,
      } = req.body;

      const slipFile = req.file;

      if (!userId || !roomId || !checkin) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
      }

      // ‚úÖ ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Customer
      let customer = await prisma.customer.findFirst({ where: { userId } });
      if (!customer) {
        customer = await prisma.customer.create({
          data: {
            userId,
            userName,
            ctitle,
            cname,
            csurname,
            cphone,
            cmumId,
            fullName: `${cname} ${csurname}`,
          },
        });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á
      const room = await prisma.room.findUnique({ where: { roomId } });
      if (!room) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á" });
      if (room.status !== 0)
        return res.status(400).json({ error: "‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });

      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ slip
      let finalSlipUrl = slipUrl || "";
      if (slipFile) {
        const filename = `${Date.now()}_${slipFile.originalname}`;
        const filepath = path.join(UPLOAD_DIR, filename);
        await fs.promises.writeFile(filepath, slipFile.buffer);
        finalSlipUrl = `/uploads/${filename}`;
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö booking ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà
      const existing = await prisma.booking.findFirst({
        where: { customerId: customer.customerId, status: { in: [0, 1] } },
      });
      if (existing) {
        return res
          .status(400)
          .json({ error: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á booking
      const booking = await prisma.booking.create({
        data: {
          customerId: customer.customerId,
          roomId,
          checkin: new Date(checkin),
          status: 0, // ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        },
        include: { customer: true, room: true },
      });

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ slip ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment
      if (finalSlipUrl) {
        await prisma.payment.create({
          data: {
            bookingId: booking.bookingId,
            billId: billId || new Date().getTime().toString(), // üëà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ billId ‡∏à‡∏∞ gen id ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            slipUrl: finalSlipUrl,
          },
        });
      }

      // ‡πÅ‡∏à‡πâ‡∏á Admin
      await notifyUser(
        process.env.ADMIN_LINE_ID!,
        `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${customer.cname} (${customer.cphone}) ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.number}`
      );

      res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", booking });
    } catch (err) {
      console.error("‚ùå Error create booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

//üö™ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
router.put("/:bookingId/checkout", async (req: Request, res: Response) => {
  try {
    const { bookingId } = req.params;
    const { checkout } = req.body;

    if (!checkout) {
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á" });
    }

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const updated = await prisma.booking.update({
      where: { bookingId },
      data: {
        checkout: new Date(checkout),
        status: 0, // ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      },
    });

    await prisma.room.update({
      where: { roomId: booking.roomId },
      data: { status: 0 },
    });

    await notifyUser(
      process.env.ADMIN_LINE_ID!,
      `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${booking.customer.fullName} (${booking.customer.cphone}) ‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number}`
    );

    res.json({ message: "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updated });
  } catch (err) {
    console.error("‚ùå Error checkout booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

//‚úÖ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put(
  "/:bookingId/approve",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { room: true, customer: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

      if (booking.status === 1) {
        return res.status(400).json({ error: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" });
      }

      const [updatedBooking] = await prisma.$transaction([
        prisma.booking.update({
          where: { bookingId },
          data: { status: 1 },
        }),
        prisma.room.update({
          where: { roomId: booking.roomId },
          data: { status: 1 },
        }),
      ]);

      await notifyUser(
        booking.customer.userId,
        `‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`
      );

      res.json({ message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
    } catch (err) {
      console.error("‚ùå Error approving booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

//‚ùå Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put(
  "/:bookingId/reject",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { customer: true, room: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

      const updatedBooking = await prisma.booking.update({
        where: { bookingId },
        data: { status: 2 }, // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
      });

      await notifyUser(
        booking.customer.userId,
        `‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`
      );

      res.json({ message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
    } catch (err) {
      console.error("‚ùå Error rejecting booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

//üìå ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
router.get("/getall", async (_req: Request, res: Response) => {
  try {
    const bookings = await prisma.booking.findMany({
      orderBy: { createdAt: "desc" },
      include: {
        room: true,
        customer: true,
      },
    });
    res.json(bookings);
  } catch (err) {
    console.error("‚ùå Error fetching bookings:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

//‚úèÔ∏è Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put(
  "/:bookingId",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;
      const { ctitle, cname, csurname, cmumId, cphone, status, checkin } =
        req.body;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { customer: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

      const updatedBooking = await prisma.booking.update({
        where: { bookingId },
        data: {
          ...(status !== undefined && { status }),
          ...(checkin && { checkin: new Date(checkin) }),
        },
        include: { customer: true, room: true },
      });

      if (ctitle || cname || csurname || cmumId || cphone) {
        await prisma.customer.update({
          where: { customerId: booking.customerId },
          data: {
            ...(ctitle && { ctitle }),
            ...(cname && { cname }),
            ...(csurname && { csurname }),
            ...(cmumId && { cmumId }),
            ...(cphone && { cphone }),
            ...(cname || csurname
              ? {
                  fullName: `${cname || booking.customer.cname} ${csurname || booking.customer.csurname}`,
                }
              : {}),
          },
        });
      }

      res.json({
        message: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        booking: updatedBooking,
      });
    } catch (err) {
      console.error("‚ùå Error updating booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

//üóëÔ∏è Admin ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.delete(
  "/:bookingId",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const deleted = await prisma.booking.delete({
        where: { bookingId },
      });

      res.json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: deleted });
    } catch (err) {
      console.error("‚ùå Error deleting booking:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
  }
);

//‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô

// ‚úÖ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.put(
  "/:bookingId/approveCheckout",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { customer: true, room: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

      if (!booking.checkout) {
        return res.status(400).json({ error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á" });
      }

      const [updatedBooking] = await prisma.$transaction([
        prisma.booking.update({
          where: { bookingId },
          data: { returnStatus: 1 }, // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
        }),
        prisma.room.update({
          where: { roomId: booking.roomId },
          data: { status: 0 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        }),
      ]);

      await notifyUser(
        booking.customer.userId,
        `‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`
      );

      res.json({
        message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        booking: updatedBooking,
      });
    } catch (err) {
      console.error("‚ùå Error approving checkout:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
    }
  }
);

//‚ùå Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.put(
  "/:bookingId/rejectCheckout",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { customer: true, room: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

      const updatedBooking = await prisma.booking.update({
        where: { bookingId },
        data: { returnStatus: 2 }, // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
      });

      await notifyUser(
        booking.customer.userId,
        `‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`
      );

      res.json({ message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
    } catch (err) {
      console.error("‚ùå Error rejecting checkout:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
    }
  }
);

//üìå ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
router.get(
  "/checkout/getall",
  authMiddleware,
  async (_req: Request, res: Response) => {
    try {
      const checkouts = await prisma.booking.findMany({
        where: { checkout: { not: null } }, // ‚úÖ ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        orderBy: { checkout: "desc" },
        include: { room: true, customer: true },
      });
      res.json(checkouts);
    } catch (err) {
      console.error("‚ùå Error fetching checkouts:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
    }
  }
);

//‚úèÔ∏è Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.put(
  "/checkout/:bookingId",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;
      const { checkout, returnStatus } = req.body;

      const booking = await prisma.booking.findUnique({
        where: { bookingId },
        include: { customer: true, room: true },
      });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô" });

      const updatedBooking = await prisma.booking.update({
        where: { bookingId },
        data: {
          ...(checkout && { checkout: new Date(checkout) }),
          ...(returnStatus !== undefined && { returnStatus }),
        },
        include: { room: true, customer: true },
      });

      res.json({
        message: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        booking: updatedBooking,
      });
    } catch (err) {
      console.error("‚ùå Error updating checkout:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
    }
  }
);

//üóëÔ∏è Admin ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.delete(
  "/checkout/:bookingId",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { bookingId } = req.params;

      const booking = await prisma.booking.findUnique({ where: { bookingId } });
      if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô" });

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á booking ‡πÅ‡∏ï‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ checkout + returnStatus
      const updatedBooking = await prisma.booking.update({
        where: { bookingId },
        data: {
          checkout: null,
          returnStatus: null,
        },
      });

      res.json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
    } catch (err) {
      console.error("‚ùå Error deleting checkout:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
    }
  }
);

export default router;
