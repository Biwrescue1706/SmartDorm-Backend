import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import prisma from "../prisma";
import { Router, Request, Response } from "express";

const router = Router();
const JWT_SECRET = process.env.JWT_SECRET;
if (!JWT_SECRET) throw new Error("‚ùå JWT_SECRET must be defined in .env file");

// ‚úÖ Debug middleware
router.use((req, _res, next) => {
  console.log("---------------------------------");
  console.log("üìç Auth Route - Origin:", req.headers.origin);
  console.log("üìç Auth Route - Cookies:", req.cookies);
  console.log("üìç Auth Route - User-Agent:", req.headers["user-agent"]);
  next();
});

// ---------------- REGISTER ----------------
router.post("/register", async (req, res) => {
  try {
    const { username, name, password } = req.body;
    if (!username || !name || !password)
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });

    const existing = await prisma.admin.findUnique({ where: { username } });
    if (existing)
      return res.status(400).json({ error: "Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });

    const hashed = await bcrypt.hash(password, 10);
    const admin = await prisma.admin.create({
      data: { username, name, password: hashed },
    });

    res.json({
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      adminID: admin.adminId,
      username: admin.username,
      name: admin.name,
    });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" });
  }
});

// ---------------- LOGIN ----------------
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    const admin = await prisma.admin.findUnique({ where: { username } });
    if (!admin) return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    const valid = await bcrypt.compare(password, admin.password);
    if (!valid) return res.status(400).json({ error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

    const token = jwt.sign(
      { adminId: admin.adminId, username: admin.username, name: admin.name },
      JWT_SECRET,
      { expiresIn: "7d" }
    );

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cookie ‡πÅ‡∏ö‡∏ö cross-domain
    res.cookie("token", token, {
      httpOnly: true,
      secure: true, // ‚úÖ localhost ‡∏à‡∏∞ false
      sameSite: "none",
      path: "/",
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    console.log("‚úÖ Login successful - Cookie set for:", admin.username);
    res.json({
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      admin: {
        adminId: admin.adminId,
        username: admin.username,
        name: admin.name,
      },
    });
  } catch (err) {
    console.error("‚ùå Login error:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ" });
  }
});

// ---------------- LOGOUT ----------------
router.post("/logout", (req: Request, res: Response) => {
  console.log("üö™ Logout called - cookies before:", req.cookies);

  res.clearCookie("token", {
    httpOnly: true,
    secure: true,
    sameSite: "none",
    path: "/",
  });

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô proxy ‡∏•‡∏ö header ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏ã‡πâ‡∏≥
  const origin = req.headers.origin;
  if (origin) {
    res.header("Access-Control-Allow-Origin", origin);
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Expose-Headers", "Set-Cookie");
  }

  console.log("üç™ ClearCookie header sent:", res.getHeaders()["set-cookie"]);
  res.status(200).json({ message: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
});

// ---------------- VERIFY ----------------
router.get("/verify", (req: Request, res: Response) => {
  console.log("üîç Verify endpoint called");
  console.log("üì¶ Cookies received:", req.cookies);

  const token = req.cookies.token;
  if (!token) {
    console.log("‚ö†Ô∏è No token found in cookies");
    return res.status(401).json({
      valid: false,
      error: "‡πÑ‡∏°‡πà‡∏°‡∏µ token",
      debug: {
        cookies: req.cookies,
        hasCookieHeader: !!req.headers.cookie,
      },
    });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as jwt.JwtPayload;
    console.log("‚úÖ Token verified:", decoded);
    res.json({ valid: true, decoded });
  } catch (err: any) {
    console.log("‚ùå Token verification failed:", err.message);
    res.status(401).json({ valid: false, error: err.message });
  }
});

export default router;
