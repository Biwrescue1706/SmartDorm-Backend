import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";

const router = Router();

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
router.get("/getall", authMiddleware, async (_req: Request, res: Response) => {
  try {
    const checkouts = await prisma.booking.findMany({
      where: { checkout: { not: null } },
      orderBy: { checkout: "desc" },
      include: { room: true, customer: true },
    });
    res.json(checkouts);
  } catch (err) {
    console.error("‚ùå Error fetching checkouts:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

// üìå ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏î‡∏∂‡∏á booking ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ)
router.get("/myBookings/:userId", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    const bookings = await prisma.booking.findMany({
      where: {
        customer: { userId },
        status: 1, // 1 = ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (active)
        checkout: null, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô
      },
      orderBy: { createdAt: "desc" },
      include: { room: true },
    });

    res.json(bookings);
  } catch (err) {
    console.error("‚ùå Error fetching user bookings:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á booking ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
  }
});

// üö™ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
router.put("/:bookingId/checkout", async (req: Request, res: Response) => {
  try {
    const { bookingId } = req.params;
    const { checkout } = req.body;

    if (!checkout) {
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á" });
    }

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const updated = await prisma.booking.update({
      where: { bookingId },
      data: {
        checkout: new Date(checkout),
        returnStatus: 0, // 0 = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô
      },
      include: { customer: true, room: true },
    });

    // üì¢ ‡πÅ‡∏à‡πâ‡∏á Admin
    const Adminmsg = `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
‡∏ä‡∏∑‡πà‡∏≠ : ${booking.customer.fullName}
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : ${booking.customer.cphone}
‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number}
https://smartdorm-frontend.onrender.com`;
    await notifyUser(process.env.ADMIN_LINE_ID!, Adminmsg);

    res.json({
      message: "‚úÖ ‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      booking: updated,
    });
  } catch (err) {
    console.error("‚ùå Error checkout booking:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
router.put("/:bookingId/approveCheckout", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    if (!booking.checkout) {
      return res.status(400).json({ error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á" });
    }

    if (booking.status !== 1) {
      return res.status(400).json({ error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ booking ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }

    const [updatedBooking] = await prisma.$transaction([
      prisma.booking.update({
        where: { bookingId },
        data: {
          returnStatus: 1, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô
          status: 3, // booking ‡∏õ‡∏¥‡∏î
        },
        include: { customer: true, room: true },
      }),
      prisma.room.update({
        where: { roomId: booking.roomId },
        data: { status: 0 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
      }),
    ]);

    // üì¢ ‡πÅ‡∏à‡πâ‡∏á User
    const Usermsg = `‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`;
    await notifyUser(booking.customer.userId, Usermsg);

    res.json({
      message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updatedBooking,
    });
  } catch (err) {
    console.error("‚ùå Error approving checkout:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

// ‚ùå Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
router.put("/:bookingId/rejectCheckout", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const updatedBooking = await prisma.booking.update({
      where: { bookingId },
      data: { returnStatus: 2 }, // ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
      include: { customer: true, room: true },
    });

    // üì¢ ‡πÅ‡∏à‡πâ‡∏á User
    const Usermsg = `‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${booking.room.number} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`;
    await notifyUser(booking.customer.userId, Usermsg);

    res.json({ message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error rejecting checkout:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

// ‚úèÔ∏è Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.put("/:bookingId", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;
    const { checkout, returnStatus } = req.body;

    const booking = await prisma.booking.findUnique({
      where: { bookingId },
      include: { customer: true, room: true },
    });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô" });

    const updatedBooking = await prisma.booking.update({
      where: { bookingId },
      data: {
        ...(checkout && { checkout: new Date(checkout) }),
        ...(returnStatus !== undefined && { returnStatus }),
      },
      include: { room: true, customer: true },
    });

    res.json({
      message: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updatedBooking,
    });
  } catch (err) {
    console.error("‚ùå Error updating checkout:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

// üóëÔ∏è Admin ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
router.delete("/:bookingId", authMiddleware, async (req, res) => {
  try {
    const { bookingId } = req.params;

    const booking = await prisma.booking.findUnique({ where: { bookingId } });
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô" });

    const updatedBooking = await prisma.booking.update({
      where: { bookingId },
      data: {
        checkout: null,
        returnStatus: null,
        status: booking.status === 3 ? 1 : booking.status, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô active
      },
    });

    res.json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updatedBooking });
  } catch (err) {
    console.error("‚ùå Error deleting checkout:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

export default router;
