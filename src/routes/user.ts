// src/routes/user.ts
import { Router, Request, Response } from "express";
import prisma from "../prisma";

const router = Router();

/**
 * üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡∏ú‡πà‡∏≤‡∏ô LINE LIFF
 */
router.post("/register", async (req: Request, res: Response) => {
  try {
    const { userId, mumId, name, phone } = req.body;

    if (!userId || !name || !phone) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    // ‚ùå userId ‡πÑ‡∏°‡πà unique ‚Üí ‡πÉ‡∏ä‡πâ findFirst
    let user = await prisma.user.findFirst({ where: { userId } });

    if (user) {
      user = await prisma.user.update({
        where: { id: user.id }, // ‡πÉ‡∏ä‡πâ id ‡∏ó‡∏µ‡πà unique
        data: { mumId, name, phone, updatedAt: new Date() },
      });
    } else {
      user = await prisma.user.create({
        data: { userId, mumId, name, phone },
      });
    }

    res.json({ message: "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user });
  } catch (err) {
    console.error("‚ùå Error register user:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ User ‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User + Bookings + Bills
 */
router.get("/:userId", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    // ‚ùå userId ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‚Üí ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const user = await prisma.user.findFirst({
      where: { userId },
      orderBy: { createdAt: "desc" },
      include: {
        bookings: {
          include: { room: true, payment: true },
          orderBy: { createdAt: "desc" },
        },
        bills: {
          include: { room: true, payment: true },
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö User" });

    res.json(user);
  } catch (err) {
    console.error("‚ùå Error fetching user:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üí∞ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á User
 */
router.get("/:userId/payments", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    const user = await prisma.user.findFirst({
      where: { userId },
      orderBy: { createdAt: "desc" },
      include: {
        bills: { include: { payment: true, room: true } },
        bookings: { include: { payment: true, room: true } },
      },
    });

    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö User" });

    // ‚úÖ ‡∏£‡∏ß‡∏° payment
    const payments = [
      ...user.bills
        .filter((b): b is typeof user.bills[number] & { payment: NonNullable<typeof b.payment> } => !!b.payment)
        .map((b) => ({
          type: "bill" as const,
          billNumber: b.number,
          roomNumber: b.roomNumber,
          amount: b.payment.amount,
          slipUrl: b.payment.slipUrl,
          status: b.payment.status,
          createdAt: b.payment.createdAt,
        })),
      ...user.bookings
        .filter((bk): bk is typeof user.bookings[number] & { payment: NonNullable<typeof bk.payment> } => !!bk.payment)
        .map((bk) => ({
          type: "booking" as const,
          bookingId: bk.id,
          roomNumber: bk.room.number,
          amount: bk.payment.amount,
          slipUrl: bk.payment.slipUrl,
          status: bk.payment.status,
          createdAt: bk.payment.createdAt,
        })),
    ].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    res.json({ userId: user.userId, payments });
  } catch (err) {
    console.error("‚ùå Error fetching payments:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

export default router;
