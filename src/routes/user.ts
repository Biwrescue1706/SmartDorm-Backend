import { Router, Request, Response } from "express";
import prisma from "../prisma";

const router = Router();

/**
 * üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡∏ú‡πà‡∏≤‡∏ô LINE LIFF
 */
router.post("/register", async (req: Request, res: Response) => {
  try {
    const { userId, mumId, name, phone } = req.body;

    if (!userId || !name || !phone) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    const user = await prisma.user.upsert({
      where: { userId },
      update: { mumId, name, phone, updatedAt: new Date() },
      create: { userId, mumId, name, phone },
    });

    res.json({ message: "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user });
  } catch (err) {
    console.error("‚ùå Error register user:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ User ‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User + Bookings + Bills
 */
router.get("/:userId", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    const user = await prisma.user.findUnique({
      where: { userId },
      include: {
        bookings: {
          include: { room: true, payment: true },
          orderBy: { createdAt: "desc" },
        },
        bills: {
          include: { room: true, payment: true },
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö User" });

    res.json(user);
  } catch (err) {
    console.error("‚ùå Error fetching user:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üí∞ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á User
 */
router.get("/:userId/payments", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;

    const user = await prisma.user.findUnique({
      where: { userId },
      include: {
        bills: {
          include: { payment: true, room: true },
        },
        bookings: {
          include: { payment: true, room: true },
        },
      },
    });

    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö User" });

    // ‚úÖ ‡∏£‡∏ß‡∏° payment ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á Bill ‡πÅ‡∏•‡∏∞ Booking
    const payments = [
      ...user.bills
        .filter(b => b.payment)
        .map(b => ({
          type: "bill",
          billNumber: b.number,
          roomNumber: b.roomNumber,
          amount: b.payment!.amount,
          slipUrl: b.payment!.slipUrl,
          status: b.payment!.status,
          createdAt: b.payment!.createdAt,
        })),
      ...user.bookings
        .filter(bk => bk.payment)
        .map(bk => ({
          type: "booking",
          bookingId: bk.id,
          roomNumber: bk.room.number,
          amount: bk.payment!.amount,
          slipUrl: bk.payment!.slipUrl,
          status: bk.payment!.status,
          createdAt: bk.payment!.createdAt,
        })),
    ].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    res.json({ userId: user.userId, payments });
  } catch (err) {
    console.error("‚ùå Error fetching payments:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

export default router;
