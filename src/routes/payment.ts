import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import { createClient } from "@supabase/supabase-js";

const router = Router();

// ‚úÖ ‡πÉ‡∏ä‡πâ memoryStorage (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô RAM ‡∏Å‡πà‡∏≠‡∏ô)
const upload = multer({ storage: multer.memoryStorage() });

// ‚úÖ Init Supabase
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

// üì§ User ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏¥‡∏•
router.post(
  "/create",
  upload.single("slip"),
  async (req: Request, res: Response) => {
    try {
      const { billId } = req.body;
      const slipFile = req.file;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
      const bill = await prisma.bill.findUnique({
        where: { billId },
        include: { customer: true, room: true },
      });
      if (!bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•" });

      if (bill.status === 1) {
        return res.status(400).json({ error: "‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" });
      }

      if (bill.status === 2) {
        return res.status(400).json({ error: "‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" });
      }

      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ slip file ‚Üí Supabase Storage
      let slipUrl = "";
      if (slipFile) {
        const filename = `${Date.now()}_${slipFile.originalname}`;

        const { error } = await supabase.storage
          .from(process.env.SUPABASE_BUCKET!)
          .upload(filename, slipFile.buffer, {
            contentType: slipFile.mimetype,
            upsert: true,
          });

        if (error) {
          console.error("‚ùå Supabase upload error:", error.message);
          return res.status(500).json({ error: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        }

        const { data } = supabase.storage
          .from(process.env.SUPABASE_BUCKET!)
          .getPublicUrl(filename);

        slipUrl = data.publicUrl;
      } else {
        return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });
      }

      // ‚úÖ Transaction ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment + update Bill
      const [payment, updatedBill] = await prisma.$transaction([
        prisma.payment.create({
          data: {
            slipUrl,
            billId,
            customerId: bill.customerId, // üëà ‡πÄ‡∏Å‡πá‡∏ö customerId ‡∏î‡πâ‡∏ß‡∏¢
          },
        }),
        prisma.bill.update({
          where: { billId },
          data: { status: 2, slipUrl }, // 2 = pending
        }),
      ]);

      // üîî Notify Admin
      const adminMsg = `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${bill.customer.fullName} 
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£(${bill.customer.cphone}) 
‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${bill.number} 
‡∏´‡πâ‡∏≠‡∏á ${bill.room.number} 
https://smartdorm-frontend.onrender.com`;
      await notifyUser(process.env.ADMIN_LINE_ID!, adminMsg);

      res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", payment, bill: updatedBill });
    } catch (err) {
      console.error("‚ùå Error create payment:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
    }
  }
);

// ‚úÖ Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢
router.put(
  "/:paymentId/verify",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { paymentId } = req.params;
      const adminId = (req as any).user?.adminId; // ‡∏à‡∏≤‡∏Å middleware

      const payment = await prisma.payment.findUnique({
        where: { paymentId },
        include: { bill: { include: { customer: true, room: true } } },
      });
      if (!payment || !payment.bill)
        return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏• ‚Üí ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
      const updatedBill = await prisma.bill.update({
        where: { billId: payment.bill.billId },
        data: { status: 1, updatedBy: adminId },
      });

      // üîî ‡πÅ‡∏à‡πâ‡∏á User
      const Usermsg = `‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ‡∏´‡πâ‡∏≠‡∏á${payment.bill.room.number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß`;
      await notifyUser(payment.bill.customer.userId, Usermsg);

      res.json({ message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", bill: updatedBill });
    } catch (err) {
      console.error("‚ùå Error verify payment:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
    }
  }
);

// ‚ùå Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ (soft reject)
router.put(
  "/:paymentId/reject",
  authMiddleware,
  async (req: Request, res: Response) => {
    try {
      const { paymentId } = req.params;
      const adminId = (req as any).user?.adminId;

      const payment = await prisma.payment.findUnique({
        where: { paymentId },
        include: { bill: { include: { customer: true, room: true } } },
      });
      if (!payment || !payment.bill)
        return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

      // ‚úÖ ‡πÉ‡∏ä‡πâ transaction ‚Üí update Payment + Bill
      const [updatedPayment, updatedBill] = await prisma.$transaction([
        prisma.payment.update({
          where: { paymentId },
          data: { slipUrl: payment.slipUrl }, // ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ field
        }),
        prisma.bill.update({
          where: { billId: payment.bill.billId },
          data: { status: 0, slipUrl: "", updatedBy: adminId }, // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞
        }),
      ]);

      // üîî ‡πÅ‡∏à‡πâ‡∏á User
      const Usermsg = `‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ‡∏´‡πâ‡∏≠‡∏á${payment.bill.room.number} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•`;
      await notifyUser(payment.bill.customer.userId, Usermsg);

      res.json({
        message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        payment: updatedPayment,
        bill: updatedBill,
      });
    } catch (err) {
      console.error("‚ùå Error reject payment:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
    }
  }
);

// üìå Admin ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/getall", authMiddleware, async (_req: Request, res: Response) => {
  try {
    const payments = await prisma.payment.findMany({
      orderBy: { createdAt: "desc" },
      include: { bill: { include: { customer: true, room: true } } },
    });
    res.json(payments);
  } catch (err) {
    console.error("‚ùå Error fetching payments:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

export default router;
