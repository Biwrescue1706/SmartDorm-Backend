// src/routes/payment.ts
import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";

const router = Router();

/**
 * üì§ User ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏¥‡∏•
 */
router.post("/create", async (req: Request, res: Response) => {
  try {
    const { slipUrl, billId } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
    const bill = await prisma.bill.findUnique({
      where: { billId },
      include: { customer: true, room: true },
    });
    if (!bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•" });

    if (bill.status === 1) {
      return res.status(400).json({ error: "‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment
    const payment = await prisma.payment.create({
      data: {
        slipUrl,
        bill: { connect: { billId } },
      },
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•‡πÄ‡∏õ‡πá‡∏ô pending (status = 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞, 1 = ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß)
    await prisma.bill.update({
      where: { billId },
      data: { paymentId: payment.paymentId, slipUrl },
    });

    // üîî Notify Admin
    await notifyUser(
      "Ud13f39623a835511f5972b35cbc5cdbd",
      `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${bill.customer.cname} (${bill.customer.cphone}) ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${bill.number} ‡∏´‡πâ‡∏≠‡∏á ${bill.room.number} ‡∏¢‡∏≠‡∏î ${bill.total} ‡∏ö‡∏≤‡∏ó`
    );

    // üîî Notify User
    await notifyUser(
      bill.customer.userId,
      `üì§ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${bill.number} ‡∏´‡πâ‡∏≠‡∏á ${bill.room.number} ‡∏¢‡∏≠‡∏î ${bill.total} ‡∏ö‡∏≤‡∏ó (‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)`
    );

    res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", payment });
  } catch (err) {
    console.error("‚ùå Error create payment:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

/**
 * ‚úÖ Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢
 */
router.put("/:paymentId/verify", authMiddleware, async (req: Request, res: Response) => {
  try {
    const { paymentId } = req.params;

    const payment = await prisma.payment.findUnique({
      where: { paymentId },
      include: { bill: { include: { customer: true, room: true } } },
    });
    if (!payment || !payment.bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏• ‚Üí ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
    const updatedBill = await prisma.bill.update({
      where: { billId: payment.bill.billId },
      data: { status: 1 },
    });

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    await notifyUser(
      payment.bill.customer.userId,
      `‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${payment.bill.number} ‡∏´‡πâ‡∏≠‡∏á ${payment.bill.room.number} ‡∏¢‡∏≠‡∏î ${payment.bill.total} ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß`
    );

    res.json({ message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", bill: updatedBill });
  } catch (err) {
    console.error("‚ùå Error verify payment:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

/**
 * ‚ùå Admin ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢
 */
router.put("/:paymentId/reject", authMiddleware, async (req: Request, res: Response) => {
  try {
    const { paymentId } = req.params;

    const payment = await prisma.payment.findUnique({
      where: { paymentId },
      include: { bill: { include: { customer: true, room: true } } },
    });
    if (!payment || !payment.bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

    // ‚úÖ ‡∏•‡∏ö payment ‡∏≠‡∏≠‡∏Å
    await prisma.payment.delete({ where: { paymentId } });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞"
    const updatedBill = await prisma.bill.update({
      where: { billId: payment.bill.billId },
      data: { status: 0, paymentId: null, slipUrl: "" },
    });

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    await notifyUser(
      payment.bill.customer.userId,
      `‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${payment.bill.number} ‡∏´‡πâ‡∏≠‡∏á ${payment.bill.room.number} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•`
    );

    res.json({ message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", bill: updatedBill });
  } catch (err) {
    console.error("‚ùå Error reject payment:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

/**
 * üìå Admin ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
router.get("/", authMiddleware, async (_req: Request, res: Response) => {
  try {
    const payments = await prisma.payment.findMany({
      orderBy: { createdAt: "desc" },
      include: { bill: { include: { customer: true, room: true } } },
    });
    res.json(payments);
  } catch (err) {
    console.error("‚ùå Error fetching payments:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

export default router;
