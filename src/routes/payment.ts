// src/routes/payment.ts
import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";
import multer from "multer";
import { createClient } from "@supabase/supabase-js";
import fetch from "node-fetch";

const router = Router();
const upload = multer({ storage: multer.memoryStorage() });

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡∏±‡∏ö LINE API
async function verifyLineToken(accessToken: string): Promise<{
  userId: string;
  displayName: string;
  pictureUrl?: string;
}> {
  const res = await fetch("https://api.line.me/v2/profile", {
    headers: { Authorization: `Bearer ${accessToken}` },
  });
  if (!res.ok) throw new Error("LINE token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
  return (await res.json()) as {
    userId: string;
    displayName: string;
    pictureUrl?: string;
  };
}

// üì§ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏¥‡∏•
router.post("/create", upload.single("slip"), async (req: Request, res: Response) => {
  try {
    const { billId, accessToken } = req.body;
    const slipFile = req.file;

    if (!accessToken)
      return res.status(401).json({ error: "‡πÑ‡∏°‡πà‡∏°‡∏µ accessToken ‡∏à‡∏≤‡∏Å LINE LIFF" });
    if (!slipFile)
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

    const { userId } = await verifyLineToken(accessToken);
    const customer = await prisma.customer.findFirst({ where: { userId } });
    if (!customer) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" });

    const bill = await prisma.bill.findUnique({
      where: { billId },
      include: { customer: true, room: true },
    });

    if (!bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•" });
    if (bill.customerId !== customer.customerId)
      return res.status(403).json({ error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ" });
    if (bill.status === 1)
      return res.status(400).json({ error: "‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" });
    if (bill.status === 2)
      return res.status(400).json({ error: "‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" });

    const filename = `${Date.now()}_${slipFile.originalname}`;
    const { error } = await supabase.storage
      .from(process.env.SUPABASE_BUCKET!)
      .upload(filename, slipFile.buffer, {
        contentType: slipFile.mimetype,
        upsert: true,
      });

    if (error) {
      console.error("Supabase upload error:", error);
      return res.status(500).json({ error: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }

    const { data } = supabase.storage
      .from(process.env.SUPABASE_BUCKET!)
      .getPublicUrl(filename);

    const slipUrl = data.publicUrl;

    const [payment, updatedBill] = await prisma.$transaction([
      prisma.payment.create({
        data: { slipUrl, billId, customerId: bill.customerId },
      }),
      prisma.bill.update({
        where: { billId },
        data: { status: 2, slipUrl },
      }),
    ]);

    const adminMsg = `üì¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${bill.customer.fullName}
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (${bill.customer.cphone})
‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${bill.billId.slice(-6).toUpperCase()}
‡∏´‡πâ‡∏≠‡∏á ${bill.room.number}
https://smartdorm-frontend.onrender.com`;

    if (process.env.ADMIN_LINE_ID)
      await notifyUser(process.env.ADMIN_LINE_ID, adminMsg);

    res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", payment, bill: updatedBill });
  } catch (err) {
    console.error("Payment create error:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

export default router;
