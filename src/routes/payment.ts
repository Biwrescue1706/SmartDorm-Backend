import { Router, Request, Response } from "express";
import prisma from "../prisma";
import { authMiddleware } from "../middleware/authMiddleware";
import { notifyUser } from "../utils/lineNotify";

const router = Router();

/**
 * üì§ User ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏¥‡∏•
 */
router.post("/create", async (req: Request, res: Response) => {
  try {
    const { amount, slipUrl, billId } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
    const bill = await prisma.bill.findUnique({
      where: { id: billId },
      include: { user: true, room: true },
    });
    if (!bill) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•" });

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment
    const payment = await prisma.payment.create({
      data: {
        amount,
        slipUrl,
        status: 1, // pending
        bill: { connect: { id: billId } },
      },
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•
    await prisma.bill.update({
      where: { id: billId },
      data: { paymentId: payment.id, slipUrl, status: 1 }, // pending
    });

    // üîî ‡πÅ‡∏à‡πâ‡∏á Admin
    await notifyUser(
      "Ud13f39623a835511f5972b35cbc5cdbd", // Admin ID
      `üì¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${bill.user.name} (${bill.user.phone}) ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ö‡∏¥‡∏• ${bill.number} ‡∏´‡πâ‡∏≠‡∏á ${bill.roomNumber} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó`
    );

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    await notifyUser(
      bill.user.userId,
      `üì§ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${bill.number} ‡∏´‡πâ‡∏≠‡∏á ${bill.roomNumber} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó (‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)`
    );

    res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", payment });
  } catch (err) {
    console.error("‚ùå Error create payment:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

/**
 * ‚úÖ Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢
 */
router.put("/:id/verify", authMiddleware, async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Payment
    const payment = await prisma.payment.findUnique({
      where: { id },
      include: { bill: { include: { user: true, room: true } } },
    });
    if (!payment) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢" });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Payment + Bill
    const verified = await prisma.payment.update({
      where: { id },
      data: { status: 0 }, // paid
    });

    await prisma.bill.update({
      where: { paymentId: id },
      data: { status: 0 }, // paid
    });

    // üîî ‡πÅ‡∏à‡πâ‡∏á User
    if (payment.bill) {
      await notifyUser(
        payment.bill.user.userId,
        `‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• ${payment.bill.number} ‡∏´‡πâ‡∏≠‡∏á ${payment.bill.roomNumber} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö`
      );
    }

    res.json({ message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", payment: verified });
  } catch (err) {
    console.error("‚ùå Error verify payment:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
  }
});

export default router;
